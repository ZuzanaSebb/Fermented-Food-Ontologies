name: Comment Trigger

on:
  issue_comment:
    types: [created, edited]

jobs:
  process_comment:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v2
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
          node-version: '14'
    
    - name: Check if commenter is organization member
      id: org-check
      run: |
        COMMENTER_LOGIN=$(jq -r .comment.user.login "$GITHUB_EVENT_PATH")
        ORG="bokulich-lab"
        RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.ORG_ACCESS_TOKEN }}" "https://api.github.com/orgs/$ORG/members/$COMMENTER_LOGIN")
        if [[ "$RESPONSE" == *"Not Found"* ]]; then
          echo "Commenter is not a member of the organization."
          exit 1
        else
          echo "Commenter is a member of the organization."
        fi
        
    - name: Process Comment
      if: contains(github.event.comment.body, '/approved ontology string:')
      id: process-comment
      run: |
        COMMENT_BODY=$(jq -r .comment.body "$GITHUB_EVENT_PATH")
        ONTOLOGY_STRING=$(echo "$COMMENT_BODY" | grep -oP '(?<=/approved ontology string:)[^\s]+')
        echo "::set-output name=ontology_string::$ONTOLOGY_STRING"

    - name: Parse comment and update JSON
      id: parse-comment
      run: |
          COMMENT_BODY=$(jq -r .comment.body "$GITHUB_EVENT_PATH")
          COMMENTER_LOGIN=$(jq -r .comment.user.login "$GITHUB_EVENT_PATH")
          
          # Parse the ontology string from the comment
          if [[ $COMMENT_BODY =~ \/approved\sontology\sstring:([a-zA-Z0-9-]+) ]]; then
            ONTOLOGY_STRING=${BASH_REMATCH[1]}
            
            # Use Node.js to manipulate JSON
            node -e "
              const fs = require('fs');
              const path = require('path');
              
              const ontologyPath = path.join(process.env.GITHUB_WORKSPACE, 'ontology.json');
              let ontology = {};
              
              // Check if the ontology file exists
              if (fs.existsSync(ontologyPath)) {
                // Read the ontology file
                ontology = JSON.parse(fs.readFileSync(ontologyPath, 'utf8'));
              } else {
                console.error('ontology.json file not found.');
                process.exit(1);
              }
              
              // Define a function to add levels to the JSON object
              function addLevels(obj, levels) {
                let current = obj;
                for (let level of levels) {
                  if (!current[level]) {
                    current[level] = {};
                  }
                  current = current[level];
                }
              }
              
              // Split the ontology string into levels
              const levels = process.env.ONTOLOGY_STRING.split('-');
              
              // Add or update the entry in the ontology JSON
              let current = ontology;
              addLevels(current, levels);
              
              // Write back the updated ontology to file
              fs.writeFileSync(ontologyPath, JSON.stringify(ontology, null, 2));
            "
            
            # Export ONTOLOGY_STRING for subsequent step
            echo "ONTOLOGY_STRING=$ONTOLOGY_STRING" >> $GITHUB_ENV
            
          else
            echo "Comment format incorrect. Please use '/approved ontology string:level1-level2-level3'."
            exit 1
          fi
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create pull request
      if: ${{ steps.parse-comment.outputs.ONTOLOGY_STRING != '' }}
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ONTOLOGY_STRING: ${{ steps.parse-comment.outputs.ONTOLOGY_STRING }}
      run: |
          if [ "${{ github.event_name }}" != "issue_comment" ]; then
            echo "Not an issue comment event, skipping pull request creation."
            exit 78
          fi
          
          # Check if the commenter is authorized to create a pull request
          COMMENTER_LOGIN=$(jq -r .comment.user.login "$GITHUB_EVENT_PATH")
          if [ "$COMMENTER_LOGIN" != "authorized_user_login" ]; then
            echo "Only authorized users can create a pull request."
            exit 1
          fi
          
          # Create a branch and commit the updated JSON file
          git checkout -b update-ontology
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add ontology.json
          git commit -m "Update ontology.json with $ONTOLOGY_STRING"
          git push origin update-ontology
          
          # Create a pull request
          hub pull-request -m "Update ontology.json with $ONTOLOGY_STRING" -b main
    
             
         
